<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:viewer="com.esri.viewer.*"
                   widgetConfigLoaded="init()">
    <fx:Script>
        <![CDATA[
			import com.esri.ags.Map;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.utils.LocalizationUtil;

			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
            //this function called when the widget's configuration is loaded
            private function init():void
            {
//                if (configXML) // checking for valid content in the configuration file
//                {
//                    lbl.text = configXML.content || getDefaultString("helloContent");
//                }
            }
			
			
			
			private function doNavAction(action:String, label:String):void
			{
				var data:Object =
					{
						tool: action,
						status: label
					}
				AppEvent.dispatch(AppEvent.SET_MAP_NAVIGATION, data);
			}
			
			protected function buttonbar1_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				doNavAction(event.currentTarget.dataProvider[event.newIndex].action,
					event.currentTarget.dataProvider[event.newIndex].label);
			}
			
			protected function buttonbar1_valueCommitHandler(event:FlexEvent):void
			{
				if (event.currentTarget.selectedIndex != -1)
				{
					doNavAction(event.currentTarget.dataProvider[event.currentTarget.selectedIndex].action,
						event.currentTarget.dataProvider[event.currentTarget.selectedIndex].label);
				}
			}

			
		]]>
    </fx:Script>
    <viewer:WidgetTemplate id="helloWorld"
                           width="300" height="300">
        <viewer:layout>
            <s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
        </viewer:layout>

        <s:Label id="lbl"
                 width="100%"
                 fontSize="18"
                 fontStyle="italic"
                 fontWeight="bold"/>
		<!--<s:Button id="buttonZoomIn" label="Zoom In" click="buttonZoomIn_clickHandler(event)"/>
		<s:Button id="buttonZoomout" label="Zoom Out"/>
		<s:Button id="buttonZoomNext" label="Zoom Next"/>
		<s:Button id="buttonZoomPrevious" label="Zoom Previous"/>
		<s:Button id="buttonZoomFull" label="Full Extent"/>
		<s:ButtonBar id="tbb" change="tbb_changeHandler(event)"
					 >
			<s:ArrayList>
				<fx:String>Zoom In</fx:String>
				<fx:String>Zoom Out</fx:String>
				<fx:String>Pan</fx:String>
			</s:ArrayList>
		</s:ButtonBar> -->
		
		<s:ButtonBar id="btnBar"
					 change="buttonbar1_changeHandler(event)"
					 requireSelection="true"
					 selectedIndex="0"
					 skinClass="widgets.Navigation.VerticalButtonBarSkin"
					 valueCommit="buttonbar1_valueCommitHandler(event)">
			<s:layout>
				<s:VerticalLayout gap="0"/>
			</s:layout>
			<s:dataProvider>
				<s:ArrayCollection>
					<fx:Object action="pan"
							   imageIcon="assets/images/i_pan.png"
							   label="{LocalizationUtil.getDefaultString('panLabel')}"/>
					<fx:Object action="zoomin"
							   imageIcon="assets/images/i_zoomin.png"
							   label="{LocalizationUtil.getDefaultString('zoomInLabel')}"
							   visible="false"/>
					<fx:Object action="zoomout"
							   imageIcon="assets/images/i_zoomout.png"
							   label="{LocalizationUtil.getDefaultString('zoomOutLabel')}"/>
				</s:ArrayCollection>
			</s:dataProvider>
		</s:ButtonBar>
    </viewer:WidgetTemplate>
</viewer:BaseWidget>
